### 工作日志：

#### 3月2日：讨论任务分工，确定每个人要完成的任务。浏览了MiniOB学习笔记并且注册了MiniOB实训营。

#### 3月3日：完成了任务三的思索与回答。

#### 3月4日：了解任务四关于皮卡地里电视台广告售卖系统用例图中的include。

#### 3月5日：完成了基于MiniOB的数据库管理系统内核实现实验的实验准备，以及Gitee的配置工作。

##### 下图为配置好的Gitee：

![image-20230307171602044](C:\Users\12739\AppData\Roaming\Typora\typora-user-images\image-20230307171602044.png)

#### 3月6日：完成了VSCode+Docker开发MiniOB的环境搭建与代码调试。

##### 首先是搭建Docker环境并挂载本地目录到docker镜像中，第一遍操作时将我自己Gitee中的代码加载到了虚拟机中并且因为复制了下面的命令（含换行符），导致oceanbase/miniob与前面的指令分隔开导致出错。

```
docker run -d --name miniob --privileged -v $PWD/miniob:/root/miniob oceanbase/miniob
```

![image-20230307112832944](C:\Users\12739\AppData\Roaming\Typora\typora-user-images\image-20230307112832944.png

##### 将上述指令修改，由于clone时出现的错误，导致出现了两个MiniOB文件夹，而miniob中只含有创建的build文件夹，导致vscode中相应的目录为空，如下图所示：

![image-20230307172750410](C:\Users\12739\AppData\Roaming\Typora\typora-user-images\image-20230307172750410.png)

##### 发现此问题后，将miniob文件夹全部删除，重新clone了MiniOB源码，重新进行了上述操作。

![image-20230307113046216](C:\Users\12739\AppData\Roaming\Typora\typora-user-images\image-20230307113046216.png)

##### 按指导书，创建task.json，选择运行任务后，没有cmake、make以及CMake：Build，如下图：

![img](file:///C:\Users\12739\Documents\Tencent Files\1273978652\Image\Group2\7[\51\7[510}$}RP~J0B%KOC}D{I9.png)

##### 经过不断的研究，最终发现指导书的截图中为tasks.json，于是将task.json修改为task.json后，一切都得到了解决，如下图：

![image-20230307175512580](C:\Users\12739\AppData\Roaming\Typora\typora-user-images\image-20230307175512580.png)

##### 执行完cmake，make以及CMake：Build后，build中的内容如下图上方内容，执行完Run observer与 Run obclient后，build中的内容如下图下方内容。

![image-20230307112925595](C:\Users\12739\AppData\Roaming\Typora\typora-user-images\image-20230307112925595.png)

##### SQL语句测试以及配置Debug环境，如下图：

![image-20230307171829039](C:\Users\12739\AppData\Roaming\Typora\typora-user-images\image-20230307171829039.png)

#### 3月7日：提测代码。

![image-20230307115009147](C:\Users\12739\AppData\Roaming\Typora\typora-user-images\image-20230307115009147.png)

### 任务四：

#### 1.9.1：

![image-20230305114428942](C:\Users\12739\AppData\Roaming\Typora\typora-user-images\image-20230305114428942.png)

#### 《include》：包含关系，指用例可以简单地包含其他用例具有的行为，并把它包含的用例行为作为自身行为的一部分。包含关系代表着基础用例会用到被包含用例，将被包含用例的时间流插入到基础用例的时间流中，其基于分解出两个或更多用例所共有的行为，来实现用例的复用，简化用例图。

#### 箭头指向：从包含用例指向被包含用例。

#### 用例2对于了解用例1的主要目的并不是必须的，但是用例2必须在执行用例1前先执行，用例2只有其结果才是比较重要的。



